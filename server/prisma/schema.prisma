// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     Admin?
  vendor    Vendor?
  customer  Customer?
  Shop      Shop?      @relation(fields: [shopId], references: [id])
  shopId    String?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  profilePhoto String?
  shopId       String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])

  shop Shop?

  @@map("vendors")
}

model Customer {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  profilePhoto String?
  isDeleted    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [email], references: [email])
  ShopReview   ShopReview[]

  @@map("customers")
}

model Shop {
  id          String   @id @default(uuid())
  vendorId    String   @unique
  name        String
  logo        String?
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendor     Vendor       @relation(fields: [vendorId], references: [id])
  products   Product[]
  User       User[]
  ShopReview ShopReview[]

  @@map("shops")
}

model ShopReview {
  id         String   @id @default(uuid())
  shopId     String?
  rating     Int
  comment    String
  customerId String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])
  shop     Shop?    @relation(fields: [shopId], references: [id])

  @@map("shop_reviews")
}

model Product {
  id             String   @id @unique @default(uuid())
  shopId         String?
  name           String
  price          Int
  categoryId     String
  description    String
  inventoryCount Int
  discount       Int
  images         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  Shop     Shop?    @relation(fields: [shopId], references: [id])

  @@map("products")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

// model DoctorSpecialties {
//   specialitiesId String
//   specialities   Specialties @relation(fields: [specialitiesId], references: [id])

//   doctorId String
//   doctor   Doctor @relation(fields: [doctorId], references: [id])

//   @@id([specialitiesId, doctorId])
//   @@map("doctor_specialties")
// }

// model PatientHealthData {
//   id                  String        @id @default(uuid())
//   patientId           String        @unique
//   patient             Patient       @relation(fields: [patientId], references: [id])
//   gender              Gender
//   dateOfBirth         String
//   bloodGroup          BloodGroup
//   hasAllergies        Boolean?      @default(false)
//   hasDiabetes         Boolean?      @default(false)
//   height              String
//   weight              String
//   smokingStatus       Boolean?      @default(false)
//   dietaryPreferences  String?
//   pregnancyStatus     Boolean?      @default(false)
//   mentalHealthHistory String?
//   immunizationStatus  String?
//   hasPastSurgeries    Boolean?      @default(false)
//   recentAnxiety       Boolean?      @default(false)
//   recentDepression    Boolean?      @default(false)
//   maritalStatus       MaritalStatus @default(UNMARRIED)
//   createdAt           DateTime      @default(now())
//   updatedAt           DateTime      @updatedAt

//   @@map("patient_health_datas")
// }

// model MedicalReport {
//   id         String   @id @default(uuid())
//   patientId  String
//   patient    Patient  @relation(fields: [patientId], references: [id])
//   reportName String
//   reportLink String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@map("madical_reports")
// }

// model Schedule {
//   id              String            @id @default(uuid())
//   startDateTime   DateTime
//   endDateTime     DateTime
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   doctorSchedules DoctorSchedules[]
//   appointment     Appointment?

//   @@map("schedules")
// }

// model DoctorSchedules {
//   doctorId String
//   doctor   Doctor @relation(fields: [doctorId], references: [id])

//   scheduleId String
//   schedule   Schedule @relation(fields: [scheduleId], references: [id])

//   isBooked Boolean @default(false)

//   appointmentId String?      @unique
//   appointment   Appointment? @relation(fields: [appointmentId], references: [id])

//   @@id([doctorId, scheduleId])
//   @@map("doctor_schedules")
// }

// model Appointment {
//   id        String  @id @default(uuid())
//   patientId String
//   patient   Patient @relation(fields: [patientId], references: [id])

//   doctorId String
//   doctor   Doctor @relation(fields: [doctorId], references: [id])

//   scheduleId String   @unique
//   schedule   Schedule @relation(fields: [scheduleId], references: [id])

//   videoCallingId  String
//   status          AppointmentStatus @default(SCHEDULED)
//   paymentStatus   PaymentStatus     @default(UNPAID)
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   doctorSchedules DoctorSchedules?
//   payment         Payment?
//   prescription    Prescription?
//   review          Review?

//   @@map("appointments")
// }

// model Payment {
//   id            String      @id @default(uuid())
//   appointmentId String      @unique
//   appointment   Appointment @relation(fields: [appointmentId], references: [id])

//   amount             Float
//   transactionId      String        @unique
//   status             PaymentStatus @default(UNPAID)
//   paymentGatewayData Json?
//   createdAt          DateTime      @default(now())
//   updatedAt          DateTime      @updatedAt

//   @@map("payments")
// }

// model Prescription {
//   id            String      @id @default(uuid())
//   appointmentId String      @unique
//   appointment   Appointment @relation(fields: [appointmentId], references: [id])

//   doctorId String
//   doctor   Doctor @relation(fields: [doctorId], references: [id])

//   patientId String
//   patient   Patient @relation(fields: [patientId], references: [id])

//   instructions String
//   followUpDate DateTime?
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt

//   @@map("prescriptions")
// }

// model Review {
//   id        String  @id @default(uuid())
//   patientId String
//   patient   Patient @relation(fields: [patientId], references: [id])

//   doctorId String
//   doctor   Doctor @relation(fields: [doctorId], references: [id])

//   appointmentId String      @unique
//   appointment   Appointment @relation(fields: [appointmentId], references: [id])

//   rating    Float
//   comment   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("reviews")
// }

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

// enum Gender {
//   MALE
//   FEMALE
// }

// enum BloodGroup {
//   A_POSITIVE
//   B_POSITIVE
//   O_POSITIVE
//   AB_POSITIVE
//   A_NEGATIVE
//   B_NEGATIVE
//   O_NEGATIVE
//   AB_NEGATIVE
// }

// enum MaritalStatus {
//   MARRIED
//   UNMARRIED
// }

// enum AppointmentStatus {
//   SCHEDULED
//   INPROGRESS
//   COMPLETED
//   CANCELED
// }

// enum PaymentStatus {
//   PAID
//   UNPAID
// }
